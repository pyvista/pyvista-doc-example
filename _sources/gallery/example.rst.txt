
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_example.py:


.. _ref_create_spline:

Create and Visualize a Spline using PyVista
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create a spline/polyline from a numpy array of XYZ vertices.

.. GENERATED FROM PYTHON SOURCE LINES 9-14

.. code-block:: default


    import numpy as np

    import pyvista as pv








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Create a dataset to plot

.. GENERATED FROM PYTHON SOURCE LINES 17-33

.. code-block:: default



    def make_points():
        """Helper to make XYZ points"""
        n_points = 200
        theta = np.linspace(-4 * np.pi, 0.5 * np.pi, n_points)
        z = np.linspace(-2, 2, n_points)
        r = z**2 + 1
        x = r * np.sin(theta)**2
        y = r * np.cos(theta)
        return np.column_stack((x, y, z))


    points = make_points()
    points[0:5, :]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[ 1.19980783e-30,  5.00000000e+00, -2.00000000e+00],
           [ 2.47886671e-02,  4.90759204e+00, -1.97989950e+00],
           [ 9.70671893e-02,  4.79203274e+00, -1.95979899e+00],
           [ 2.13061187e-01,  4.65468074e+00, -1.93969849e+00],
           [ 3.68225287e-01,  4.49697646e+00, -1.91959799e+00]])



.. GENERATED FROM PYTHON SOURCE LINES 34-37

Now let's make a function that can create line cells on a
:class:`pyvista.PolyData` mesh given that the points are in order for the
segments they make.

.. GENERATED FROM PYTHON SOURCE LINES 37-53

.. code-block:: default



    def lines_from_points(points):
        """Given an array of points, make a line set"""
        poly = pv.PolyData()
        poly.points = points
        cells = np.full((len(points) - 1, 3), 2, dtype=np.int_)
        cells[:, 1] = np.arange(0, len(points) - 1, dtype=np.int_)
        cells[:, 2] = np.arange(1, len(points), dtype=np.int_)
        poly.lines = cells
        return poly


    line = lines_from_points(points)
    line






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>199</td></tr>
    <tr><td>N Points</td><td>200</td></tr>
    <tr><td>X Bounds</td><td>1.200e-30, 5.000e+00</td></tr>
    <tr><td>Y Bounds</td><td>-2.322e+00, 5.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>-2.000e+00, 2.000e+00</td></tr>
    <tr><td>N Arrays</td><td>0</td></tr>
    </table>


    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 54-59

.. code-block:: default

    line["scalars"] = np.arange(line.n_points)
    tube = line.tube(radius=0.1)
    tube.plot(smooth_shading=True)





.. image-sg:: /gallery/images/sphx_glr_example_001.png
   :alt: example
   :srcset: /gallery/images/sphx_glr_example_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 60-62

That tube has sharp edges at each line segment. This can be mitigated by
creating a single PolyLine cell for all of the points

.. GENERATED FROM PYTHON SOURCE LINES 62-79

.. code-block:: default



    def polyline_from_points(points):
        poly = pv.PolyData()
        poly.points = points
        the_cell = np.arange(0, len(points), dtype=np.int_)
        the_cell = np.insert(the_cell, 0, len(points))
        poly.lines = the_cell
        return poly


    polyline = polyline_from_points(points)
    polyline["scalars"] = np.arange(polyline.n_points)
    tube = polyline.tube(radius=0.1)
    tube.plot(smooth_shading=True)





.. image-sg:: /gallery/images/sphx_glr_example_002.png
   :alt: example
   :srcset: /gallery/images/sphx_glr_example_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 80-81

You could also interpolate those points onto a parametric spline

.. GENERATED FROM PYTHON SOURCE LINES 81-85

.. code-block:: default


    # Create spline with 1000 interpolation points
    spline = pv.Spline(points, 1000)








.. GENERATED FROM PYTHON SOURCE LINES 86-87

Plot spline as a tube

.. GENERATED FROM PYTHON SOURCE LINES 87-93

.. code-block:: default


    # add scalars to spline and plot it
    spline["scalars"] = np.arange(spline.n_points)
    tube = spline.tube(radius=0.1)
    tube.plot(smooth_shading=True)




.. image-sg:: /gallery/images/sphx_glr_example_003.png
   :alt: example
   :srcset: /gallery/images/sphx_glr_example_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 94-95

The spline can also be plotted as a plain line

.. GENERATED FROM PYTHON SOURCE LINES 95-103

.. code-block:: default


    # generate same spline with 400 interpolation points
    spline = pv.Spline(points, 400)

    # plot without scalars
    spline.plot(line_width=4, color="k")





.. image-sg:: /gallery/images/sphx_glr_example_004.png
   :alt: example
   :srcset: /gallery/images/sphx_glr_example_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 104-109

Ribbons
+++++++

Ayy of the lines from the examples above can be used to create ribbons.
Take a look at the :func:`pyvista.PolyDataFilters.ribbon` filter.

.. GENERATED FROM PYTHON SOURCE LINES 109-112

.. code-block:: default


    ribbon = spline.compute_arc_length().ribbon(width=0.75, scalars='arc_length')
    ribbon.plot(color=True)



.. image-sg:: /gallery/images/sphx_glr_example_005.png
   :alt: example
   :srcset: /gallery/images/sphx_glr_example_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.456 seconds)


.. _sphx_glr_download_gallery_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example.py <example.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example.ipynb <example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
